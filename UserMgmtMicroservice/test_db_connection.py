#!/usr/bin/env python3
"""
Script para testear la conexi√≥n con la base de datos MySQL
"""
import os
import sys
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

# Cargar variables de entorno
load_dotenv()

def test_database_connection():
    """Testea la conexi√≥n con la base de datos"""
    print("=" * 50)
    print("TESTEANDO CONEXI√ìN CON LA BASE DE DATOS")
    print("=" * 50)
    
    # Obtener URL de conexi√≥n
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        database_url = "mysql+pymysql://fastapi:fastapipass@127.0.0.1:3307/usermgmt_db"
        print("‚ö†Ô∏è  Usando URL de fallback")
    
    print(f"üìã URL de conexi√≥n: {database_url}")
    print()
    
    try:
        # Crear engine
        print("üîß Creando engine de SQLAlchemy...")
        engine = create_engine(
            database_url,
            echo=False,
            pool_pre_ping=True,
            pool_recycle=300
        )
        
        # Probar conexi√≥n b√°sica
        print("üîå Probando conexi√≥n b√°sica...")
        with engine.connect() as connection:
            result = connection.execute(text("SELECT 1"))
            print("‚úÖ Conexi√≥n b√°sica exitosa")
        
        # Probar informaci√≥n del servidor
        print("üìä Obteniendo informaci√≥n del servidor...")
        with engine.connect() as connection:
            # Versi√≥n de MySQL
            result = connection.execute(text("SELECT VERSION()"))
            version = result.fetchone()[0]
            print(f"   - Versi√≥n MySQL: {version}")
            
            # Base de datos actual
            result = connection.execute(text("SELECT DATABASE()"))
            current_db = result.fetchone()[0]
            print(f"   - Base de datos actual: {current_db}")
            
            # Mostrar tablas existentes
            result = connection.execute(text("SHOW TABLES"))
            tables = result.fetchall()
            if tables:
                print(f"   - Tablas encontradas: {len(tables)}")
                for table in tables:
                    print(f"     ‚Ä¢ {table[0]}")
            else:
                print("   - No se encontraron tablas")
        
        # Probar creaci√≥n de tablas
        print("üèóÔ∏è  Probando creaci√≥n de tablas...")
        try:
            from app.models.customer import Customer, Base
            Base.metadata.create_all(bind=engine)
            print("‚úÖ Tablas creadas/verificadas correctamente")
        except Exception as e:
            print(f"‚ùå Error creando tablas: {e}")
        
        # Probar operaci√≥n CRUD b√°sica
        print("üß™ Probando operaci√≥n CRUD b√°sica...")
        from sqlalchemy.orm import sessionmaker
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        
        with SessionLocal() as session:
            # Contar registros existentes
            from app.models.customer import Customer
            count = session.query(Customer).count()
            print(f"   - Registros existentes en customers: {count}")
        
        print()
        print("‚úÖ TODAS LAS PRUEBAS EXITOSAS")
        print("üéâ La conexi√≥n con la base de datos est√° funcionando correctamente")
        return True
        
    except SQLAlchemyError as e:
        print(f"‚ùå Error de SQLAlchemy: {e}")
        return False
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        print("üí° Aseg√∫rate de que todos los m√≥dulos est√©n disponibles")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def check_environment():
    """Verifica la configuraci√≥n del entorno"""
    print("üîç VERIFICANDO CONFIGURACI√ìN DEL ENTORNO")
    print("-" * 40)
    
    # Verificar archivo .env
    if os.path.exists('.env'):
        print("‚úÖ Archivo .env encontrado")
    else:
        print("‚ùå Archivo .env no encontrado")
    
    # Verificar variables de entorno
    database_url = os.getenv("DATABASE_URL")
    if database_url:
        print(f"‚úÖ DATABASE_URL configurada: {database_url}")
    else:
        print("‚ö†Ô∏è  DATABASE_URL no configurada, usando fallback")
    
    # Verificar dependencias
    try:
        import pymysql
        print("‚úÖ PyMySQL disponible")
    except ImportError:
        print("‚ùå PyMySQL no encontrado")
    
    try:
        import sqlalchemy
        print(f"‚úÖ SQLAlchemy disponible (versi√≥n: {sqlalchemy.__version__})")
    except ImportError:
        print("‚ùå SQLAlchemy no encontrado")
    
    print()

if __name__ == "__main__":
    print("üöÄ INICIANDO TEST DE CONEXI√ìN A BASE DE DATOS")
    print()
    
    # Verificar entorno
    check_environment()
    
    # Testear conexi√≥n
    success = test_database_connection()
    
    if success:
        print("\nüéØ RESULTADO: Conexi√≥n exitosa")
        sys.exit(0)
    else:
        print("\nüí• RESULTADO: Conexi√≥n fallida")
        sys.exit(1)